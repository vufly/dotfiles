{
    ;; !  | means mandatory
    ;; #  | means optional
    ;; !! | mandatory command + control + optional + shift (hyper)
    ;; ## | optional any

    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://pqrs.org/osx/karabiner/json.html#from-event-definition-modifiers

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; need to prefix C T O S F with ! or #

:profiles {
    :Default {
      :default true
      :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                      ;; keys need to be pressed within this threshold to be considered simultaneous
      :delay   500    ;; to_delayed_action_delay_milliseconds (def: 500)
                      ;; basically it means time after which the key press is count delayed
      :alone   200    ;; to_if_alone_timeout_milliseconds (def: 1000)
                      ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
      :held    1000   ;; to_if_held_down_threshold_milliseconds (def: 500)
                      ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
  }
} ;; profiles

:templates {
  :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
  :open "open \"%s\""
} ;; templates

;; Define different kinds of keyboards
:devices {
  :apl-usb-int [{:vendor_id 1452, :product_id 635 }]  ;; Apple Internal & Magic Keyboard (USB)
  :apl-bt [{:vendor_id 1452, :product_id 615}] ;; Apple Magic Keyboard (Bluetooth)
  :ap2 [{:vendor_id 1241, :product_id 41618}] ;; Anne Pro 2 (mechanical)
  :lingyi [{:vendor_id 9610, :product_id 4102}] ;; Lingyi Black Widow (mechanical)
  :nj68-bt [{:vendor_id 1452, :product_id 556}] ;; Keydous NJ68 (Bluetooth)
  :nj68-w [{:vendor_id 1155, :product_id 16421}] ;; Keydous NJ68 (wire)
} ;; devices

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
:layers {
  ; :space-mode {:key :spacebar}
} ;; layers

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; or keys like z which are used less often
; :simlayers {
;     :close-bracket-mode {:key :close_bracket}
;     :open-bracket-mode  {:key :open_bracket}
; } ;; simlayers

;; main contains multiple manipulators
:main [

    ;; each manipulator has a description and multiple rules

    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions> <other options>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions> <other options>]    ;; -> rule 2
    ;; ]}
    ;;
    ;; <from> can be keywords defined in froms or keycodes without `{:not-from true}`
    ;; <to> can be keywords defined in tos, keycodes without `{:not-to true}` or strings (shell script)
    ;; <conditions> can be keywords defined in layers, devices, applications
    ;; <other options> {:other {:parameters {:to_delayed_action_delay_milliseconds 100 :basic.to_if_alone_timeout_milliseconds 500 :basic.to_if_held_down_threshold_milliseconds 250}} }

    ;; if simplified modifier is used in <to>, optional(#) definition will be ignored.

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

    {
      :des "[Internal Keyboard] fn -> left_control"
      :rules [[:##fn :left_control [:apl-usb-int]]]
    }

    {
      :des "[Internal Keyboard] left_control -> fn"
      :rules [[:##left_control :fn [:apl-usb-int]]]
    }

    {
      :des "[Windows Keyboard] windows -> left_option"
      :rules [[:##left_command :left_option [:lingyi]]]
    }

    {
      :des "[Windows Keyboard] left_alt -> left_command"
      :rules [[:##left_option :left_command [:lingyi]]]
    }

    {
      :des "[Windows Keyboard] right_alt -> right_command"
      :rules [[:##right_option :right_command [:lingyi]]]
    }

    {
      :des "[Capslock Enhancement] caps_lock -> escape/left_control"
      :rules [[:##caps_lock :left_control nil {:alone :escape}]]
    }

    {
      :des "[Space Mode] OVERALL TRIGGER"
      :rules [[:##spacebar {:set ["space-mode",1]} nil {:alone :spacebar :afterup {:set ["space-mode",0]}}]]
    }

    {
      :des "[Space Mode] space+b -> Space (hold to repeat)"
      :rules [
        :space-mode
          [:##b :spacebar]
      ]
    }

    {
      :des "[Space Mode] space+hjkl -> left/down/up/right"
      :rules [
        :space-mode
          [:##h :left_arrow]
          [:##j :down_arrow]
          [:##k :up_arrow]
          [:##l :right_arrow]
      ]
    }

    {
      :des "[Space Mode] Space+u to page_down, Space+i to page_up"
      :rules [
        :space-mode
          [:##u :page_down]
          [:##i :page_up]
      ]
    }

    {
      :des "[Space Mode] Space+y to home, Space+o to end"
      :rules [
        :space-mode
          [:##y :home]
          [:##o :end]
      ]
    }

    {
      :des "[Space Mode]: Space+[1-9] to F[1-9], Space+0 to F10, Space+Hyphen (-) to F11, Space+Equal Sign (=) to F12"
      :rules [
        :space-mode
          [:##1 :f1]
          [:##2 :f2]
          [:##3 :f3]
          [:##4 :f4]
          [:##5 :f5]
          [:##6 :f6]
          [:##7 :f7]
          [:##8 :f8]
          [:##9 :f9]
          [:##0 :f10]
          [:##hyphen :f11]
          [:##equal_sign :f12]
      ]
    }

    {
      :des "[Launch Mode] (l+;) TRIGGER"
      :rules [[{
        :sim [:l :semicolon]
        :simo {
          :interrupt true
          :dorder :insensitive
          :uorder :insensitive
          :afterup {:set ["launch-mode" 0]}}}
          {:set ["launch-mode" 1]}
      ]]
    }
    {:des "[Launch Mode] -> a (Open Activity Monitor)" :rules [:launch-mode [:##a [:km "open: Activity Monitor"]]]}
    {:des "[Launch Mode] -> s (Open Slack)" :rules [:launch-mode [:##s [:km "open: Slack"]]]}
    {:des "[Launch Mode] -> d (Open MySQLWorkbench)" :rules [:launch-mode [:##d [:km "open: MySQLWorkbench"]]]}
    {:des "[Launch Mode] -> f (Open Firefox)" :rules [:launch-mode [:##f [:km "open: Firefox"]]]}
    {:des "[Launch Mode] -> g (Open Fork)" :rules [:launch-mode [:##g [:km "open: Fork"]]]}
    {:des "[Launch Mode] -> h (Open Finder)" :rules [:launch-mode [:##h [:km "open: Finder"]]]}
    {:des "[Launch Mode] -> j (Open Kitty)" :rules [:launch-mode [:##j [:km "open: Kitty"]]]}
    {:des "[Launch Mode] -> k (Open Keyboard Maestro)" :rules [:launch-mode [:##k [:km "open: Keyboard Maestro"]]]}
    {:des "[Launch Mode] -> e (Open Spark)" :rules [:launch-mode [:##e [:km "open: Spark"]]]}
    {:des "[Launch Mode] -> r (Open Skype)" :rules [:launch-mode [:##r [:km "open: Skype"]]]}
    {:des "[Launch Mode] -> i (Open iTerm)" :rules [:launch-mode [:##i [:km "open: iTerm"]]]}
    {:des "[Launch Mode] -> z (Open Zoom)" :rules [:launch-mode [:##z [:km "open: Zoom"]]]}
    {:des "[Launch Mode] -> c (Open Chrome)" :rules [:launch-mode [:##c [:km "open: Chrome"]]]}
    {:des "[Launch Mode] -> v (Open VSCode)" :rules [:launch-mode [:##v [:km "open: VSCode"]]]}
    {:des "[Launch Mode] -> m (Open Spotify)" :rules [:launch-mode [:##m [:km "open: Spotify"]]]}

] ;; main list

}
